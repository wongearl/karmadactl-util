package common

import (
	"context"
	"testing"

	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	testclient "k8s.io/client-go/kubernetes/fake"
)

var (
	// Scheme contains all types of custom clientset and kubernetes client-go clientset
	Scheme = runtime.NewScheme()
)

func TestWriteKubeconfig(t *testing.T) {

	byteSline := []byte("")

	type args struct {
		kubeconfigPath  string
		secretName      string
		secretNamespace string
		k8sClient       *testclient.Clientset
	}

	tests := []struct {
		name    string
		secret  *v1.Secret
		args    args
		want    string
		wantErr bool
	}{
		{
			name: "write karmadaConfig",
			secret: &v1.Secret{
				ObjectMeta: metav1.ObjectMeta{
					Namespace: "karmada-system",
					Name:      "karmada-kubeconfig",
				},
				Data: map[string][]byte{"kubeconfig": byteSline},
			},
			args: args{
				kubeconfigPath:  "/tmp/karmadaConfig",
				secretName:      "karmada-kubeconfig",
				secretNamespace: "karmada-system",
				k8sClient:       testclient.NewSimpleClientset(),
			},
			want:    "/tmp/karmadaConfig",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.args.k8sClient.CoreV1().Secrets(tt.args.secretNamespace).Create(context.TODO(), tt.secret, metav1.CreateOptions{})
			got, err := WriteKubeconfig(tt.args.kubeconfigPath, tt.args.secretName, tt.args.secretNamespace, tt.args.k8sClient)
			if (err != nil) != tt.wantErr {
				t.Errorf("WriteKubeconfig() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("WriteKubeconfig() = %v, want %v", got, tt.want)
			}
		})
	}
}
